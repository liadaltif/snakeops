pipeline {
  agent any

  environment {
    PYTHON   = 'python3'
    VENV_DIR = '.venv'
    // change these if your Artifactory URL/repo are different
    JF_URL   = 'http://artifactory:8082/artifactory'
    JF_REPO  = 'snake-dev'
  }

  parameters {
    string(name: 'VERSION', defaultValue: '0.1.0', description: 'Release version (used when no tag is present)')
    choice(name: 'TARGET_OS', choices: ['linux','windows'], description: 'Executable target OS')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        sh 'git rev-parse --short HEAD'
      }
    }

    stage('Set up venv') {
      steps {
        sh '''
          set -e
          if [ ! -d "${VENV_DIR}" ]; then ${PYTHON} -m venv ${VENV_DIR}; fi
          . ${VENV_DIR}/bin/activate
          python -m pip install --upgrade pip
          pip install pyinstaller
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        '''
      }
    }

    stage('Build executable') {
      steps {
        sh '''
          set -e
          . ${VENV_DIR}/bin/activate
          rm -rf build dist

          ENTRY="snake_game/ui_console.py"   # <-- change if your entry is different
          NAME="snake"

          pyinstaller --onefile --name "${NAME}" "${ENTRY}"

          if [ "${TARGET_OS}" = "windows" ]; then
            ARTIFACT="dist/${NAME}.exe"
          else
            ARTIFACT="dist/${NAME}"
          fi

          echo "ARTIFACT=${ARTIFACT}" > artifact.env
          echo "Built artifact: ${ARTIFACT}"
          ls -la dist
        '''
      }
    }

    stage('Upload to Artifactory') {
      steps {
        withCredentials([string(credentialsId: 'jfrog-api-key', variable: 'JF_API_KEY')]) {
          sh '''
            set -e
            . ./artifact.env

            # Prefer the git tag as version; fall back to the VERSION param
            REL="$(git describe --tags --exact-match 2>/dev/null || echo "${VERSION}")"

            A_PATH="snakeops/${REL}/"
            FILE="$(basename "${ARTIFACT}")"

            echo "Uploading ${FILE} to ${JF_URL}/${JF_REPO}/${A_PATH}${FILE}"
            curl -fsSL -H "X-JFrog-Art-Api: ${JF_API_KEY}" \
                 -T "${ARTIFACT}" \
                 "${JF_URL}/${JF_REPO}/${A_PATH}${FILE}"

            echo "${JF_URL}/${JF_REPO}/${A_PATH}${FILE}" > artifact_url.txt
            echo "${REL}" > rel.txt
          '''
        }
      }
    }

    stage('Update index.json (release catalog)') {
      steps {
        withCredentials([string(credentialsId: 'jfrog-api-key', variable: 'JF_API_KEY')]) {
          sh '''
            set -e
            INDEX_PATH="snakeops/index.json"
            INDEX_URL="${JF_URL}/${JF_REPO}/${INDEX_PATH}"

            # Download current index.json if exists; else start with []
            curl -fsSL -H "X-JFrog-Art-Api: ${JF_API_KEY}" "${INDEX_URL}" -o index.json || echo '[]' > index.json

            . ./artifact.env
            REL="$(cat rel.txt)"
            URL="$(cat artifact_url.txt)"
            SHA="$(sha256sum "${ARTIFACT}" | awk '{print $1}')"
            export REL URL SHA TARGET_OS

            ${PYTHON} - <<'PY'
import json, os
# Read existing index
try:
    with open('index.json','r') as f:
        idx = json.load(f)
except Exception:
    idx = []
entry = {
    "version": os.environ.get("REL","0.0.0"),
    "os": os.environ.get("TARGET_OS","linux"),
    "url": os.environ.get("URL",""),
    "sha256": os.environ.get("SHA","")
}
# Replace any existing entry with same (version, os)
idx = [e for e in idx if not (e.get("version")==entry["version"] and e.get("os")==entry["os"])]
idx.append(entry)
with open('index.json','w') as f:
    json.dump(idx, f, indent=2)
print("index.json updated:", entry)
PY

            # Upload updated index.json
            curl -fsSL -H "X-JFrog-Art-Api: ${JF_API_KEY}" \
                 -T "index.json" \
                 "${INDEX_URL}"
          '''
        }
      }
    }
  }

  post {
    success {
      archiveArtifacts artifacts: 'dist/*,artifact.env,artifact_url.txt,rel.txt,index.json', allowEmptyArchive: true
      echo "Release complete."
    }
  }
}
